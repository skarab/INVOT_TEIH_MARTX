#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_nonuniform_qualifier : enable
#extension GL_EXT_scalar_block_layout : enable
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require
#extension GL_EXT_buffer_reference2 : require

#include "defines.h"

struct Globals
{
	float time;
	uint frameId;
	vec3 cameraPosition;
	vec3 cameraTarget;
};

struct AABB
{
	vec3 minimum;
	vec3 maximum;
};

hitAttributeEXT vec4 hitColor;

layout(set = 0, binding = 3, scalar) uniform _globals { Globals globals; };
layout(set = 0, binding = 4, scalar) readonly buffer aabbs_ { AABB aabbs[]; };
layout(set = 0, binding = 5, rgba8) uniform image3D textures[4];
layout(set = 0, binding = 6) uniform sampler3D samplers[4];

void rayBoxIntersect(vec3 rpos, vec3 rdir, vec3 vmin, vec3 vmax, out float tnear, out float tfar)
{
	vec3  invDir = 1.0 / rdir;
	vec3  tbot   = invDir * (vmin - rpos);
	vec3  ttop   = invDir * (vmax - rpos);
	vec3  tmin   = min(ttop, tbot);
	vec3  tmax   = max(ttop, tbot);
	float t0     = max(tmin.x, max(tmin.y, tmin.z));
	float t1     = min(tmax.x, min(tmax.y, tmax.z));
	tnear = t1 > max(t0, 0.0) ? t0 : -1.0;
	tfar = t1;
}

void main()
{
	uint aabbId = gl_PrimitiveID + ((globals.frameId + 1) % 2) * AABBS_COUNT;
	AABB aabb = aabbs[aabbId];
	
	/* Not sure if should try to skip it here, didn't gived any performance gain.
	if (aabb.minimum.x <= -1000000.0)
	{
		return;
	}*/

	float tnear, tfar;
	rayBoxIntersect(gl_WorldRayOriginEXT, gl_WorldRayDirectionEXT, aabb.minimum, aabb.maximum, tnear, tfar);

	if (tnear >= 0.0)
	{
		uint texId = (globals.frameId + 3) % 4;
		float t;
		vec4 color = vec4(0.0);
		for (int i = 0 ; i < RAY_MARCHING_SAMPLE_COUNT && color.a < 1.0 ; ++i)
		{
			t = mix(tnear, tfar, i / (RAY_MARCHING_SAMPLE_COUNT-1.0));
			vec3 wsPosition = gl_WorldRayOriginEXT + gl_WorldRayDirectionEXT * t;
			vec3 uv = ((wsPosition / BOUNDS + 0.5) * TEXTURE_SIZE + 0.5) / float(MAX_TEXTURE_SIZE);
			
			vec4 sp = texture(samplers[texId], uv);
			
			// NOTE: can't precompute since texture is rgba8 (same if using half...)
			sp.a /= RAY_MARCHING_SAMPLE_COUNT * mix(64.0, 1.0, sp.a);
			sp.rgb *= sp.a;
			
			color += sp;
		}

		if (color.a > 0.0)
		{
			hitColor = color;
			reportIntersectionEXT(t, 0);
		}
	}
}
